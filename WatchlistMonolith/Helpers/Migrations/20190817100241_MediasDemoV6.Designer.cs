// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchlistMonolith.Context;

namespace WatchlistMonolith.Migrations
{
    [DbContext(typeof(MediasContext))]
    [Migration("20190817100241_MediasDemoV6")]
    partial class MediasDemoV6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WatchlistMonolith.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<Guid>("MediaGroupId");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("MediaGroupId");

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b"),
                            Description = "While in the library, college student Naofumi Iwatani finds a fantasy book about \"Four Heroes\"; The Spear, Sword, Bow, and Shield.",
                            MediaGroupId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Thumbnail = "https://image.tmdb.org/t/p/w320_and_h180_bestv2/3UyyCIoFdWDoHpt4jk6wlWAKaex.jpg",
                            Title = "EP 1 The Shield Hero"
                        },
                        new
                        {
                            Id = new Guid("8ae54711-7084-46ff-bf9e-9092d0ab37b8"),
                            Description = "Unable to use a sword, Naofumi searches for a partner, but he can only afford a sickly demi-human slave.",
                            MediaGroupId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Thumbnail = "https://images.attvideo.com/image/e_qKSpECrgM/raphtalia-kawaii-loli-tate-no-yuusha-no-nariagari-ep-2.jpg",
                            Title = "EP 2 The Slave Girl"
                        },
                        new
                        {
                            Id = new Guid("57970c37-a716-4668-ba9d-cabd79948e94"),
                            Description = "Naofumi and Raphtalia become good partners but must prepare themselves to fight an incoming wave.",
                            MediaGroupId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Thumbnail = "https://dg31sz3gwrwan.cloudfront.net/screen/6983643/1_iphone.jpg",
                            Title = "EP 3 Wave of Catastrophe"
                        },
                        new
                        {
                            Id = new Guid("d8663e5e-7494-4f81-8739-6e0de1bea7ee"),
                            Description = "A teenage boy and girl embark on a quest to meet each other for the first time after they magically swap bodies.",
                            MediaGroupId = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            Thumbnail = "https://d2e111jq13me73.cloudfront.net/sites/default/files/styles/review_gallery_carousel_slide_thumbnail/public/screenshots/csm-movie/your-name-ss1.jpg?itok=2vfTpJIX",
                            Title = "Your Name"
                        },
                        new
                        {
                            Id = new Guid("d173e20d-159e-4127-9ce9-b0ac2564ad97"),
                            Description = "On Priestes first official adventure, she and her party of novices fall victim to murderous goblins.",
                            MediaGroupId = new Guid("24810dfc-2d94-4cc7-aab5-cdf98b83f0c9"),
                            Thumbnail = "https://dg31sz3gwrwan.cloudfront.net/screen/6758282/1_iphone.jpg",
                            Title = "EP 1 The Fate of Particular Adventurers"
                        },
                        new
                        {
                            Id = new Guid("b79a54f9-45a2-421b-735e-08d713cec375"),
                            Description = "As Priestess accompanies Goblin Slayer on his intentionally specific quests.",
                            MediaGroupId = new Guid("24810dfc-2d94-4cc7-aab5-cdf98b83f0c9"),
                            Thumbnail = "https://image.tmdb.org/t/p/w320_and_h180_bestv2/e3BKChEdCLFmD1CcnkHWiUSuLTO.jpg",
                            Title = "EP 2 Goblin Slayer"
                        },
                        new
                        {
                            Id = new Guid("30189f54-b7d8-4726-cd85-08d713de3475"),
                            Description = "Three adventurers, High Elf Archer, Dwarf Shaman, and Lizardman Priest, request Goblin Slayer's aid to stop a destructive demon lord.",
                            MediaGroupId = new Guid("24810dfc-2d94-4cc7-aab5-cdf98b83f0c9"),
                            Thumbnail = "https://image.tmdb.org/t/p/w320_and_h180_bestv2/xVfJgU9sAFyRPY2gKCkzLjDixsA.jpg",
                            Title = "EP 3 Unexpected Visitors"
                        },
                        new
                        {
                            Id = new Guid("493c3228-3444-4a49-9cc0-e8532edc59b2"),
                            Description = "When a phony wizard lures Lucy onto his ship with the promise of getting into the guild, her new friends must bail her out.",
                            MediaGroupId = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            Thumbnail = "https://d2e111jq13me73.cloudfront.net/sites/default/files/styles/review_gallery_carousel_slide_thumbnail/public/screenshots/csm-tv/fairy-tail-ss5.jpg?itok=wy2HxSkX",
                            Title = "EP 1 The Fairy Tail"
                        },
                        new
                        {
                            Id = new Guid("3706ded9-30ca-4b90-971c-924d330edb96"),
                            Description = "DescriptionNatsu and Happy take Lucy to their headquarters to meet the rowdy members of Fairy Tail.",
                            MediaGroupId = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            Thumbnail = "https://images.attvideo.com/image/bVMH3H84shM/fairy-tail-episode-2-english-dubbed.jpg",
                            Title = "EP 2 Fire Dragon, Monkey, and Bull"
                        },
                        new
                        {
                            Id = new Guid("f064bae0-483b-4db9-b06a-c85129803fdb"),
                            Description = "Natsu picks up a job that could pay big, but he needs Lucy to complete his plan.",
                            MediaGroupId = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            Thumbnail = "https://www.myanime.co/file/cache/5jo46ejjxv0-320x180.jpg",
                            Title = "EP 3 Infiltrate the Everlue Mansion"
                        },
                        new
                        {
                            Id = new Guid("8d81a6f1-f933-429a-91fb-7d38cd54b142"),
                            Description = "Koichi Hirose travels to Naples in order to find the possible son of DIO, Haruno Shiobana.",
                            MediaGroupId = new Guid("d106b8e5-11e8-4f83-9b33-db7e2be73102"),
                            Thumbnail = "https://dw9to29mmj727.cloudfront.net/thumbnails/episodes/11029-jojos-bizarre-adventure-season-four-1-320x180.jpg?size=960x540",
                            Title = "EP 1 Golden Wind"
                        },
                        new
                        {
                            Id = new Guid("3d0c1d77-26e7-4972-9e8f-cf1055c996f7"),
                            Description = "Bucciarati is looking for the person responsible for critically injuring Leaky Eye Luca.",
                            MediaGroupId = new Guid("d106b8e5-11e8-4f83-9b33-db7e2be73102"),
                            Thumbnail = "https://dw9to29mmj727.cloudfront.net/thumbnails/episodes/11030-jojos-bizarre-adventure-season-four-2-320x180.jpg?size=960x540",
                            Title = "EP 2 Bucciarati Is Coming"
                        },
                        new
                        {
                            Id = new Guid("4259cac2-fcf2-4ca2-b311-813bc291c2ce"),
                            Description = "Risotto figures out that Doppio must be a Stand user that the boss trusts in deeply because he’s able to hear the noise from a certain Stand.",
                            MediaGroupId = new Guid("d106b8e5-11e8-4f83-9b33-db7e2be73102"),
                            Thumbnail = "https://i3.wp.com/ytimg.googleusercontent.com/vi/GxmiZ6Fn-dk/mqdefault.jpg",
                            Title = "EP 27 King Crimson vs Metallica"
                        });
                });

            modelBuilder.Entity("WatchlistMonolith.Entities.MediaGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("MediaGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            Name = "Shield Hero",
                            Type = "Series"
                        },
                        new
                        {
                            Id = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            Name = "Your Name",
                            Type = "Movie"
                        },
                        new
                        {
                            Id = new Guid("24810dfc-2d94-4cc7-aab5-cdf98b83f0c9"),
                            Name = "Goblin Slayer",
                            Type = "Series"
                        },
                        new
                        {
                            Id = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            Name = "Fairy Tail",
                            Type = "Series"
                        },
                        new
                        {
                            Id = new Guid("d106b8e5-11e8-4f83-9b33-db7e2be73102"),
                            Name = "JoJo's Bizarre Adventure: Golden Wind",
                            Type = "Series"
                        });
                });

            modelBuilder.Entity("WatchlistMonolith.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<Guid>("WatchLaterId");

                    b.HasKey("Id");

                    b.HasIndex("WatchLaterId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45e7ae75-a080-4827-a80e-6f32047e533f"),
                            Email = "omar.aceves@mymail.com",
                            Password = "password",
                            UserName = "omaraceves",
                            WatchLaterId = new Guid("2c5a8684-da10-4706-8343-ae8333050309")
                        },
                        new
                        {
                            Id = new Guid("b96f346e-8bda-4272-8ecb-135e79434c4b"),
                            Email = "karen.aceves@mymail.com",
                            Password = "password",
                            UserName = "karenaceves",
                            WatchLaterId = new Guid("39dca36a-4af7-45de-bdb9-058795e0ea53")
                        },
                        new
                        {
                            Id = new Guid("5ea0fe7a-b8e4-4b58-bd29-362945a7fc50"),
                            Email = "milo.woof@mymail.com",
                            Password = "password",
                            UserName = "milowoof",
                            WatchLaterId = new Guid("9bf72002-7401-4075-85ae-5b2d7e0a9c86")
                        });
                });

            modelBuilder.Entity("WatchlistMonolith.Entities.Watchlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("WatchLists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5a8684-da10-4706-8343-ae8333050309"),
                            Name = "WatchlaterForUser1"
                        },
                        new
                        {
                            Id = new Guid("39dca36a-4af7-45de-bdb9-058795e0ea53"),
                            Name = "WatchlaterForUser2"
                        },
                        new
                        {
                            Id = new Guid("9bf72002-7401-4075-85ae-5b2d7e0a9c86"),
                            Name = "WatchlaterForUser3"
                        });
                });

            modelBuilder.Entity("WatchlistMonolith.Entities.WatchlistMedia", b =>
                {
                    b.Property<Guid>("WatchlistId");

                    b.Property<Guid>("MediaId");

                    b.Property<Guid>("Id");

                    b.HasKey("WatchlistId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("WatchlistMedia");
                });

            modelBuilder.Entity("WatchlistMonolith.Entities.Media", b =>
                {
                    b.HasOne("WatchlistMonolith.Entities.MediaGroup", "MediaGroup")
                        .WithMany()
                        .HasForeignKey("MediaGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WatchlistMonolith.Entities.User", b =>
                {
                    b.HasOne("WatchlistMonolith.Entities.Watchlist", "WatchLater")
                        .WithMany()
                        .HasForeignKey("WatchLaterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WatchlistMonolith.Entities.WatchlistMedia", b =>
                {
                    b.HasOne("WatchlistMonolith.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WatchlistMonolith.Entities.Watchlist", "WatchList")
                        .WithMany("Medias")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
